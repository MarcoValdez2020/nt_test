services:
  postgres: # Servicio de base de datos PostgreSQL
    image: postgres:17-alpine3.21 # Imagen de PostgreSQL
    container_name: ${POSTGRES_CONTAINER_NAME} # Nombre de nuestro contenedor
    restart: always # Reiniciar el contenedor automáticamente (para evitar caíadas por reinicios del sistema)
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "${POSTGRES_PORT}:5432"
    volumes:
      - postgres-container-data:/var/lib/postgresql/data # Volumen para persistencia de datos
      - ./database/db_model.sql:/docker-entrypoint-initdb.d/db_model.sql # Script SQL para inicializar la base de datos
    networks:
      - red-prueba-tecnica # Conexión a la red de producción
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${POSTGRES_USER}"] # Comando para verificar la salud del contenedor
      interval: 2s # Intervalo entre chequeos de salud
      timeout: 5s # Tiempo de espera para el chequeo de salud
      retries: 3 # Número de reintentos antes de marcar el contenedor como no saludable


  etl:
    depends_on:
      postgres: # Dependencia del contenedor de PostgreSQL
        condition: service_healthy # Esperar a que el contenedor de PostgreSQL esté saludable
    build:
      context: .. # Contexto de construcción del contenedor ETL
      dockerfile: etl/Dockerfile # Ruta del Dockerfile para el contenedor ETL
    image: etl-image:v1.0.0 # Nombre de la imagen del contenedor ETL
    container_name: etl-container # Nombre del contenedor ETL
    restart: "no" # No reiniciar automáticamente
    environment:
      PYTHONUNBUFFERED: 1 # Para evitar el buffering de salida de Python y mostrar los logs en tiempo real
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_CONTAINER_NAME: ${POSTGRES_CONTAINER_NAME}
    volumes:
      - ../etl/app:/app # Montar el directorio de la aplicación
    networks:
      - red-prueba-tecnica # Conexión a la red de producción


volumes: # Creación de volúmenes
  postgres-container-data: # Creación de un volumen para persistir datos de PostgreSQL
    name: postgres-container-data  # Nombre asignado al volumen


networks:
  red-prueba-tecnica:
    name: red-prueba-tecnica      # Nombre asignado a la red
    driver: bridge                # Tipo de red (bridge permite comunicación entre contenedores y host)
